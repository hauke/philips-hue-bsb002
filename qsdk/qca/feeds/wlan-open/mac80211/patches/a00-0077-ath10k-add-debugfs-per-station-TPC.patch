--- a/drivers/net/wireless/ath/ath10k/core.h
+++ b/drivers/net/wireless/ath/ath10k/core.h
@@ -424,6 +424,7 @@ struct ath10k_sta {
 	struct ath10k_tx_stats tx_stats;
 #endif
 	struct ath10k_smart_ant_sta *smart_ant_sta;
+	u8 tpc;
 };
 
 #define ATH10K_VDEV_SETUP_TIMEOUT_HZ (5 * HZ)
--- a/drivers/net/wireless/ath/ath10k/debug.h
+++ b/drivers/net/wireless/ath/ath10k/debug.h
@@ -61,6 +61,8 @@ enum ath10k_dbg_aggr_mode {
 
 /* FIXME: How to calculate the buffer size sanely? */
 #define ATH10K_FW_STATS_BUF_SIZE (1024 * 1024)
+#define ATH10K_TPC_MAX_VAL 70
+#define ATH10K_TPC_MIN_VAL 0
 
 extern unsigned int ath10k_debug_mask;
 extern bool bug_on_fw_assert;
--- a/drivers/net/wireless/ath/ath10k/debugfs_sta.c
+++ b/drivers/net/wireless/ath/ath10k/debugfs_sta.c
@@ -746,6 +746,68 @@ static const struct file_operations fops
 	.llseek = default_llseek,
 };
 
+static ssize_t ath10k_dbg_sta_read_tpc(struct file *file,
+					     char __user *user_buf,
+					     size_t count, loff_t *ppos)
+{
+	struct ieee80211_sta *sta = file->private_data;
+	struct ath10k_sta *arsta = (struct ath10k_sta *)sta->drv_priv;
+	struct ath10k *ar = arsta->arvif->ar;
+	char buf[20];
+	int len = 0;
+
+	mutex_lock(&ar->conf_mutex);
+	len = scnprintf(buf, sizeof(buf) - len, "tpc: %d dBm\n", arsta->tpc);
+	mutex_unlock(&ar->conf_mutex);
+
+	return simple_read_from_buffer(user_buf, count, ppos, buf, len);
+}
+
+static ssize_t ath10k_dbg_sta_write_tpc(struct file *file,
+					      const char __user *user_buf,
+					      size_t count, loff_t *ppos)
+{
+	struct ieee80211_sta *sta = file->private_data;
+	struct ath10k_sta *arsta = (struct ath10k_sta *)sta->drv_priv;
+	struct ath10k *ar = arsta->arvif->ar;
+	u8 tpc;
+	int ret;
+
+	if (kstrtou8_from_user(user_buf, count, 0, &tpc))
+		return -EINVAL;
+
+	if (tpc > ATH10K_TPC_MAX_VAL || tpc < ATH10K_TPC_MIN_VAL)
+		return -EINVAL;
+
+	mutex_lock(&ar->conf_mutex);
+	if (ar->state != ATH10K_STATE_ON) {
+		ret = count;
+		goto out;
+	}
+
+	ret = ath10k_wmi_peer_set_param(ar, arsta->arvif->vdev_id, sta->addr,
+					WMI_PEER_USE_FIXED_PWR, tpc);
+	if (ret) {
+		ath10k_warn(ar, "failed to set tx power for station ret: %d\n", ret);
+		goto out;
+	}
+	if (!ret)
+		ret = count;
+
+	arsta->tpc = tpc;
+out:
+	mutex_unlock(&ar->conf_mutex);
+	return ret;
+}
+
+static const struct file_operations fops_set_tpc = {
+	.read = ath10k_dbg_sta_read_tpc,
+	.write = ath10k_dbg_sta_write_tpc,
+	.open = simple_open,
+	.owner = THIS_MODULE,
+	.llseek = default_llseek,
+};
+
 void ath10k_sta_add_debugfs(struct ieee80211_hw *hw, struct ieee80211_vif *vif,
 			    struct ieee80211_sta *sta, struct dentry *dir)
 {
@@ -758,4 +820,6 @@ void ath10k_sta_add_debugfs(struct ieee8
 			    &fops_rx_duration);
 	debugfs_create_file("tx_stats", S_IRUGO, dir, sta,
 			    &fops_tx_stats);
+	debugfs_create_file("tpc", S_IRUGO | S_IWUSR, dir, sta,
+			    &fops_set_tpc);
 }
--- a/drivers/net/wireless/ath/ath10k/wmi.h
+++ b/drivers/net/wireless/ath/ath10k/wmi.h
@@ -5799,6 +5799,7 @@ enum wmi_peer_param {
 	WMI_PEER_CHAN_WIDTH = 0x4,
 	WMI_PEER_NSS        = 0x5,
 	WMI_PEER_USE_4ADDR  = 0x6,
+	WMI_PEER_USE_FIXED_PWR = 0x8,
 	WMI_PEER_DUMMY_VAR  = 0xff, /* dummy parameter for STA PS workaround */
 };
 
