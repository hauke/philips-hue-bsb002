--- a/net/wireless/ap.c
+++ b/net/wireless/ap.c
@@ -6,6 +6,39 @@
 #include "rdev-ops.h"
 
 
+static bool cfg80211_is_last_ap_running(struct cfg80211_registered_device *rdev,
+					struct net_device *dev)
+{
+	struct wireless_dev *wdev = dev->ieee80211_ptr;
+	struct wireless_dev *wdev_iter;
+
+	ASSERT_WDEV_LOCK(wdev);
+
+	if (rdev->num_running_ifaces == 1) {
+		/* Last running AP iface */
+		return true;
+	}
+
+	/* More running interfaces */
+	list_for_each_entry(wdev_iter, &rdev->wdev_list, list) {
+		if (wdev_iter == wdev)
+			continue;
+
+		if (!wdev_iter->netdev)
+			continue;
+
+		if (!netif_running(wdev_iter->netdev)) {
+			continue;
+		}
+
+		if (wdev_iter->iftype == NL80211_IFTYPE_AP) {
+			return false;
+		}
+	}
+
+	return true;
+}
+
 int __cfg80211_stop_ap(struct cfg80211_registered_device *rdev,
 		       struct net_device *dev, bool notify)
 {
@@ -34,6 +67,9 @@ int __cfg80211_stop_ap(struct cfg80211_r
 			nl80211_send_ap_stopped(wdev);
 	}
 
+	if (cfg80211_is_last_ap_running(rdev, dev))
+		cfg80211_leave_dfs_chandef(wdev->wiphy, &wdev->preset_chandef);
+
 	return err;
 }
 
--- a/net/wireless/chan.c
+++ b/net/wireless/chan.c
@@ -455,6 +455,44 @@ bool cfg80211_chandef_dfs_usable(struct
 	return (r1 + r2 > 0);
 }
 
+static void cfg80211_leave_dfs_chans(struct wiphy *wiphy,
+				     u32 center_freq,
+				     u32 bandwidth)
+{
+	struct ieee80211_channel *c;
+	u32 freq, start_freq, end_freq;
+
+	start_freq = cfg80211_get_start_freq(center_freq, bandwidth);
+	end_freq = cfg80211_get_end_freq(center_freq, bandwidth);
+
+	for (freq = start_freq; freq <= end_freq; freq += 20) {
+		c = ieee80211_get_channel(wiphy, freq);
+		if (!c)
+			continue;
+		if (c->dfs_state != NL80211_DFS_AVAILABLE)
+			continue;
+
+		c->dfs_state = NL80211_DFS_USABLE;
+		c->dfs_state_entered = jiffies;
+	}
+}
+
+void cfg80211_leave_dfs_chandef(struct wiphy *wiphy,
+				struct cfg80211_chan_def *chandef)
+{
+	int width;
+
+	if (WARN_ON(!cfg80211_chandef_valid(chandef)))
+		return;
+
+	width = cfg80211_chandef_get_width(chandef);
+	cfg80211_leave_dfs_chans(wiphy, chandef->center_freq1, width);
+
+	if (!chandef->center_freq2)
+		return;
+
+	cfg80211_leave_dfs_chans(wiphy, chandef->center_freq2, width);
+}
 
 static bool cfg80211_get_chans_dfs_available(struct wiphy *wiphy,
 					     u32 center_freq,
--- a/net/wireless/core.h
+++ b/net/wireless/core.h
@@ -162,6 +162,17 @@ static inline void cfg80211_unhold_bss(s
 	WARN_ON(r < 0);
 }
 
+/**
+ * cfg80211_leave_dfs_chandef - Leaving dfs chandef
+ * @wiphy: the wiphy
+ * @chandef: chandef for the current channel
+ *
+ * This function is called when dfs chandef is being not used for different
+ * reasons. Change channels DFS_AVAILABLE to DFS_USABLE again. Leave channels
+ * DFS_UNAVAILABLE untouched.
+ */
+void cfg80211_leave_dfs_chandef(struct wiphy *wiphy,
+				struct cfg80211_chan_def *chandef);
 
 struct cfg80211_registered_device *cfg80211_rdev_by_wiphy_idx(int wiphy_idx);
 int get_wiphy_idx(struct wiphy *wiphy);
