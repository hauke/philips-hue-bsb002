--- a/chacha20_simple.c
+++ b/chacha20_simple.c
@@ -35,9 +35,9 @@ void chacha20_setup(chacha20_ctx *ctx, c
   ctx->schedule[9] = LE(key + 20 % length);
   ctx->schedule[10] = LE(key + 24 % length);
   ctx->schedule[11] = LE(key + 28 % length);
-  //Surprise! This is really a block cipher in CTR mode
-  ctx->schedule[12] = 0; //Counter
-  ctx->schedule[13] = 0; //Counter
+  /*Surprise! This is really a block cipher in CTR mode*/
+  ctx->schedule[12] = 0; /*Counter*/
+  ctx->schedule[13] = 0; /*Counter*/
   ctx->schedule[14] = LE(nonce+0);
   ctx->schedule[15] = LE(nonce+4);
 
@@ -59,7 +59,7 @@ void chacha20_counter_set(chacha20_ctx *
 
 void chacha20_block(chacha20_ctx *ctx, uint32_t output[16])
 {
-  uint32_t *const nonce = ctx->schedule+12; //12 is where the 128 bit counter is
+  uint32_t *const nonce = ctx->schedule+12; /*12 is where the 128 bit counter is*/
   int i = 10;
 
   memcpy(output, ctx->schedule, sizeof(ctx->schedule));
@@ -102,7 +102,7 @@ void chacha20_encrypt(chacha20_ctx *ctx,
   {
     uint8_t *const k = (uint8_t *)ctx->keystream;
 
-    //First, use any buffered keystream from previous calls
+    /*First, use any buffered keystream from previous calls*/
     if (ctx->available)
     {
       size_t amount = MIN(length, ctx->available);
@@ -111,7 +111,7 @@ void chacha20_encrypt(chacha20_ctx *ctx,
       length -= amount;
     }
 
-    //Then, handle new blocks
+    /*Then, handle new blocks*/
     while (length)
     {
       size_t amount = MIN(length, sizeof(ctx->keystream));
--- a/chacha20_simple.h
+++ b/chacha20_simple.h
@@ -39,19 +39,19 @@ typedef struct
   size_t available;
 } chacha20_ctx;
 
-//Call this to initilize a chacha20_ctx, must be called before all other functions
+/*Call this to initilize a chacha20_ctx, must be called before all other functions*/
 void chacha20_setup(chacha20_ctx *ctx, const uint8_t *key, size_t length, uint8_t nonce[8]);
 
-//Call this if you need to process a particular block number
+/*Call this if you need to process a particular block number*/
 void chacha20_counter_set(chacha20_ctx *ctx, uint64_t counter);
 
-//Raw keystream for the current block, convert output to uint8_t[] for individual bytes. Counter is incremented upon use
+/*Raw keystream for the current block, convert output to uint8_t[] for individual bytes. Counter is incremented upon use*/
 void chacha20_block(chacha20_ctx *ctx, uint32_t output[16]);
 
-//Encrypt an arbitrary amount of plaintext, call continuously as needed
+/*Encrypt an arbitrary amount of plaintext, call continuously as needed*/
 void chacha20_encrypt(chacha20_ctx *ctx, const uint8_t *in, uint8_t *out, size_t length);
 
-//Decrypt an arbitrary amount of ciphertext. Actually, for chacha20, decryption is the same function as encryption
+/*Decrypt an arbitrary amount of ciphertext. Actually, for chacha20, decryption is the same function as encryption*/
 void chacha20_decrypt(chacha20_ctx *ctx, const uint8_t *in, uint8_t *out, size_t length);
 
 #ifdef __cplusplus
